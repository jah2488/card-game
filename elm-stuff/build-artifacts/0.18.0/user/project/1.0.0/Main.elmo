var _user$project$Main$actions = F4(
	function (game, mc, x1, y1) {
		if (_elm_lang$core$Native_Utils.eq(mc.target, true)) {
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$text_,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(x1),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y(y1),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Events$onClick(
									_user$project$Common$Target(mc)),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg$text('Target'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			};
		} else {
			if (_elm_lang$core$Native_Utils.eq(mc.active, true)) {
				var _p0 = mc.loc;
				switch (_p0.ctor) {
					case 'Board':
						return _elm_lang$core$Native_Utils.eq(_p0._0, game.playerOne) ? {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$text_,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x(x1),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$y(y1),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Events$onClick(
												_user$project$Common$Attack(mc)),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg$text('Attack'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						} : {ctor: '[]'};
					case 'Hand':
						return {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$text_,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x(x1),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$y(y1),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Events$onClick(
												_user$project$Common$PlayCard(mc)),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg$text('Play'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						};
					case 'Deck':
						return {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$text_,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x(x1),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$y(y1),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Events$onClick(_user$project$Common$DrawCard),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg$text('Draw`'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						};
					default:
						return {ctor: '[]'};
				}
			} else {
				return {ctor: '[]'};
			}
		}
	});
var _user$project$Main$viewCard = F4(
	function (game, mc, posX, posY) {
		var color = _elm_lang$core$Native_Utils.eq(mc.active, true) ? '#DDCCBB' : (_elm_lang$core$Native_Utils.eq(mc.target, true) ? '#FF55AA' : '#111111');
		var toAttr = function (x) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(x),
				'px');
		};
		var nameX = toAttr(posX + 20);
		var costX = toAttr(posX + 50);
		var hpX = toAttr(posX + 10);
		var strX = toAttr(posX + 80);
		var cardY = 15 * posY;
		var bottomY = toAttr(110 + cardY);
		var back = {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$text_,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x(nameX),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y(bottomY),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#FFFFFF'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg$text('BACK'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		};
		var topY = toAttr(25 + cardY);
		var card = mc.card;
		var front = A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$text_,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(nameX),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y(bottomY),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#FFFFFF'),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg$text(card.name),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$text_,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x(costX),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y(bottomY),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#FFFFFF'),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg$text(
								_elm_lang$core$Basics$toString(card.cost)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$text_,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$x(strX),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$y(topY),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#FFFFFF'),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg$text(
									_elm_lang$core$Basics$toString(card.str)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$text_,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x(hpX),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$y(topY),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#FFFFFF'),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg$text(
										_elm_lang$core$Basics$toString(card.hp)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			A4(
				_user$project$Main$actions,
				game,
				mc,
				strX,
				toAttr(cardY + 50)));
		var content = _elm_lang$core$Native_Utils.eq(
			mc.loc,
			_user$project$Common$Hand(game.playerTwo)) ? back : front;
		return A2(
			_elm_lang$svg$Svg$g,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$rect,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(
							_elm_lang$core$Basics$toString(posX)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y(
								toAttr(cardY)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width('100'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('125'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$rx('15'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$ry('15'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill(color),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Events$onClick(
														_user$project$Common$Active(mc)),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{ctor: '[]'},
						content),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Main$cardOffset = F3(
	function (game, idx, cl) {
		var y = function () {
			var _p1 = cl.loc;
			switch (_p1.ctor) {
				case 'Board':
					return _elm_lang$core$Native_Utils.eq(_p1._0, game.playerOne) ? 20 : 10;
				case 'Hand':
					return _elm_lang$core$Native_Utils.eq(_p1._0, game.playerOne) ? 30 : 1;
				case 'Deck':
					return 100;
				default:
					return 100;
			}
		}();
		var gutter = 50;
		var offset = 150;
		return A4(_user$project$Main$viewCard, game, cl, gutter + ((idx + 1) * offset), y);
	});
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 800 600'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$width('800px'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$height('600px'),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$g,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$rect,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x('10px'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y('10px'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('100px'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100px'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$text_,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#FFFFFF'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg$text('hi'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{ctor: '[]'},
					A2(
						_elm_lang$core$List$indexedMap,
						_user$project$Main$cardOffset(model),
						model.cards)),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Common$Tick);
};
var _user$project$Main$playCard = F3(
	function (activeCard, game, currentCard) {
		return _elm_lang$core$Native_Utils.eq(activeCard.id, currentCard.id) ? _elm_lang$core$Native_Utils.update(
			currentCard,
			{
				loc: _user$project$Common$Board(game.playerOne),
				active: false
			}) : currentCard;
	});
var _user$project$Main$updateCard = F2(
	function (current, target) {
		var card = current.card;
		return _elm_lang$core$Native_Utils.update(
			card,
			{hp: card.hp - target.card.str});
	});
var _user$project$Main$targetCards = F3(
	function (activeCard, game, currentCard) {
		var _p2 = currentCard.loc;
		switch (_p2.ctor) {
			case 'Board':
				return _elm_lang$core$Native_Utils.eq(_p2._0, game.playerTwo) ? _elm_lang$core$Native_Utils.update(
					currentCard,
					{target: true}) : _elm_lang$core$Native_Utils.update(
					currentCard,
					{target: false});
			case 'Hand':
				return _elm_lang$core$Native_Utils.update(
					currentCard,
					{target: false});
			case 'Deck':
				return _elm_lang$core$Native_Utils.update(
					currentCard,
					{target: false});
			default:
				return _elm_lang$core$Native_Utils.update(
					currentCard,
					{target: false});
		}
	});
var _user$project$Main$updateCards = F2(
	function (activeCard, card) {
		return _elm_lang$core$Native_Utils.eq(activeCard.id, card.id) ? _elm_lang$core$Native_Utils.update(
			card,
			{active: true, target: false}) : _elm_lang$core$Native_Utils.update(
			card,
			{active: false, target: false});
	});
var _user$project$Main$cl = F3(
	function (id, c, l) {
		return {id: id, card: c, loc: l, active: false, target: false};
	});
var _user$project$Main$resolveAttack = F3(
	function (targetCard, game, currentCard) {
		var defaultCard = A3(
			_user$project$Main$cl,
			-1,
			_user$project$Cards$b,
			_user$project$Common$Graveyard(game.playerOne));
		var activeCard = A2(
			_elm_lang$core$Maybe$withDefault,
			defaultCard,
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					function (card) {
						return _elm_lang$core$Native_Utils.eq(card.active, true);
					},
					game.cards)));
		return _elm_lang$core$Native_Utils.eq(targetCard.id, currentCard.id) ? _elm_lang$core$Native_Utils.update(
			currentCard,
			{
				target: false,
				active: false,
				card: A2(_user$project$Main$updateCard, currentCard, targetCard)
			}) : _elm_lang$core$Native_Utils.update(
			currentCard,
			{target: false, active: false});
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'Active':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							cards: A2(
								_elm_lang$core$List$map,
								_user$project$Main$updateCards(_p3._0),
								model.cards)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Attack':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							cards: A2(
								_elm_lang$core$List$map,
								A2(_user$project$Main$targetCards, _p3._0, model),
								model.cards)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Target':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							cards: A2(
								_elm_lang$core$List$map,
								A2(_user$project$Main$resolveAttack, _p3._0, model),
								model.cards)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'PlayCard':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							cards: A2(
								_elm_lang$core$List$map,
								A2(_user$project$Main$playCard, _p3._0, model),
								model.cards)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DrawCard':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Tick':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{time: model.time + 1}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ClearSelection':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							cards: A2(
								_elm_lang$core$List$map,
								function (c) {
									return _elm_lang$core$Native_Utils.update(
										c,
										{active: false});
								},
								model.cards)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$newPlayer = function (name) {
	return {name: name, maxHp: 50, hp: 50, wallet: 0};
};
var _user$project$Main$init = function () {
	var player2 = _user$project$Main$newPlayer('2');
	var player1 = _user$project$Main$newPlayer('1');
	return {
		ctor: '_Tuple2',
		_0: {
			turn: {ctor: '_Tuple2', _0: 0, _1: player1},
			playerOne: player1,
			playerTwo: player2,
			cards: {
				ctor: '::',
				_0: A3(
					_user$project$Main$cl,
					1,
					_user$project$Cards$b,
					_user$project$Common$Hand(player1)),
				_1: {
					ctor: '::',
					_0: A3(
						_user$project$Main$cl,
						2,
						_user$project$Cards$b,
						_user$project$Common$Hand(player2)),
					_1: {
						ctor: '::',
						_0: A3(
							_user$project$Main$cl,
							3,
							_user$project$Cards$b,
							_user$project$Common$Board(player1)),
						_1: {
							ctor: '::',
							_0: A3(
								_user$project$Main$cl,
								4,
								_user$project$Cards$b,
								_user$project$Common$Board(player2)),
							_1: {
								ctor: '::',
								_0: A3(
									_user$project$Main$cl,
									5,
									_user$project$Cards$b,
									_user$project$Common$Graveyard(player2)),
								_1: {
									ctor: '::',
									_0: A3(
										_user$project$Main$cl,
										6,
										_user$project$Cards$b,
										_user$project$Common$Graveyard(player1)),
									_1: {
										ctor: '::',
										_0: A3(
											_user$project$Main$cl,
											7,
											_user$project$Cards$b,
											_user$project$Common$Deck(player1)),
										_1: {
											ctor: '::',
											_0: A3(
												_user$project$Main$cl,
												8,
												_user$project$Cards$b,
												_user$project$Common$Deck(player1)),
											_1: {
												ctor: '::',
												_0: A3(
													_user$project$Main$cl,
													9,
													_user$project$Cards$b,
													_user$project$Common$Deck(player1)),
												_1: {
													ctor: '::',
													_0: A3(
														_user$project$Main$cl,
														10,
														_user$project$Cards$b,
														_user$project$Common$Deck(player2)),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			time: 0
		},
		_1: _elm_lang$core$Platform_Cmd$none
	};
}();
var _user$project$Main$newCard = F4(
	function (name, str, hp, cost) {
		return {name: name, maxStr: str, str: str, maxHp: hp, hp: hp, cost: cost};
	});
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
